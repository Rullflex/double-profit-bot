import { createAppContext } from "@/core/appContext";
import dotenv from "dotenv";
import { handleElama, handleReset, handleStart } from "@/handlers/command";

dotenv.config();

async function main() {
  const app = await createAppContext(process.env.INTERNAL_BOT_TOKEN!);

  await app.bot.api.setMyCommands([
    { command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
    { command: "elama", description: "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª eLama" },
    { command: "dailyreport", description: "–û—Ç—á—ë—Ç –ø–æ –¥–Ω—è–º" },
    { command: "massmessage", description: "–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞" },
    { command: "reset", description: "–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ" },
  ]);

  app.bot.command("start", handleStart);
  app.bot.command("elama", handleElama.bind(null, app));
  app.bot.command("reset", handleReset.bind(null, app));

  app.bot.on("message", async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    // TODO –µ—â–µ callback_query

    const step = app.steps.get(userId);

    if (step) {
      await step(app, ctx);
      return;
    }

    // Default fallback
    await ctx.reply("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í–≤–µ–¥–∏—Ç–µ / —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥");
  });

  app.logger.log("ü§ñ Internal –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");

  await app.bot.start();
}

main();
